{"version":3,"file":"router.umd.min.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  external: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type SubmissionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | SubmissionFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: SubmissionFormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createURL,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  SubmissionFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validActionMethodsArr: SubmissionFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validActionMethods = new Set<SubmissionFormMethod>(validActionMethodsArr);\n\nconst validRequestMethodsArr: FormMethod[] = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(\n        state,\n        result,\n        opts && opts.replace === true\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult);\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (\n      redirect.external &&\n      typeof window !== \"undefined\" &&\n      typeof window.location !== \"undefined\"\n    ) {\n      if (replace) {\n        window.location.replace(redirect.location);\n      } else {\n        window.location.assign(redirect.location);\n      }\n      return;\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      formMethod &&\n      isSubmissionMethod(formMethod) &&\n      formEncType &&\n      formData\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: createURL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: createURL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Check if this an external redirect that goes to a new origin\n      let external = createURL(location).origin !== createURL(\"/\").origin;\n\n      // Support relative routing in internal redirects\n      if (!external) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let requestPath = createURL(request.url).pathname;\n        let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        external,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isSubmissionMethod(method: string): method is SubmissionFormMethod {\n  return validActionMethods.has(method as SubmissionFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"names":["Action","exports","PopStateEventType","warning","cond","message","console","warn","Error","e","getHistoryState","location","usr","state","key","createLocation","current","to","_extends","pathname","search","hash","parsePath","Math","random","toString","substr","createPath","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","createURL","base","window","origin","href","URL","getUrlBasedHistory","getLocation","createHref","validateLocation","options","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","handlePop","listen","fn","addEventListener","removeEventListener","encodeLocation","url","push","Push","historyState","pushState","error","assign","replace","Replace","replaceState","go","n","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","map","route","index","treePath","id","join","invariant","children","has","add","isIndexRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","length","slice","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","paramRe","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","endsWith","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","value","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","DeferredData","constructor","data","reject","this","pendingKeys","subscriber","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","entries","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","async","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","_tracked","isTrackedPromise","_error","_data","ErrorResponse","status","statusText","internal","isRouteErrorResponse","validActionMethodsArr","validActionMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isServer","createElement","normalizeNavigateOptions","opts","isFetcher","isSubmissionNavigation","isValidMethod","getInternalRouterError","method","isSubmissionMethod","submission","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","m","getMatchesToLoad","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","pendingActionData","pendingError","fetchLoadMatches","actionResult","values","navigationMatches","keys","loader","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","loaderData","shouldRevalidateLoader","revalidatingFetchers","_ref10","fetchMatches","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","shouldRevalidate","routeChoice","callLoaderOrAction","type","request","isStaticRequest","isRouteRequest","resultType","result","onReject","handler","Response","headers","external","resolvedLocation","set","redirect","revalidate","response","contentType","json","text","statusCode","deferred","deferredData","createRequest","init","toUpperCase","body","Request","URLSearchParams","processRouteLoaderData","matchesToLoad","results","activeDeferreds","errors","foundError","loaderHeaders","isRedirectResult","isErrorResult","boundaryMatch","findNearestBoundary","isDeferredResult","processLoaderData","fetcherResults","fetchers","doneFetcher","mergeLoaderData","newLoaderData","mergedLoaderData","routeId","reverse","find","hasErrorBoundary","getShortCircuitMatches","_temp","errorMessage","findRedirect","isRedirectResponse","resolveDeferredResults","currentMatches","isRevalidatingLoader","resolveDeferredData","unwrap","resolveData","getAll","createUseMatchesMatch","handle","getTargetMatch","pathMatches","querySelector","getAttribute","initialEntries","initialIndex","entry","createMemoryLocation","clampIndex","min","max","getCurrentLocation","nextLocation","splice","delta","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","router","pendingNavigationController","initialized","hydrationData","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","Map","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","getSavedScrollPosition","startNavigation","startUninterruptedRevalidation","userMatches","saveScrollPosition","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","actionOutput","interruptActiveLoads","actionMatch","shortCircuited","startRedirectNavigation","pendingActionError","handleAction","fetcher","revalidatingFetcher","_ref3","loaderResults","callLoadersAndMaybeResolveData","_ref4","doneKeys","markFetchersDone","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","redirectLocation","redirectHistoryAction","fetchersToLoad","all","_ref8","_ref9","abortFetcher","setFetcherError","deleteFetcher","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","y","initialize","enableScrollRestoration","positions","getPosition","getKey","navigate","fetch","requestMatches","existingFetcher","abortController","fetchRequest","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","handleFetcherAction","handleFetcherLoader","dispose","clear","_internalFetchControllers","_internalActiveDeferreds","prefix","__","str","context","_deepestRenderedBoundaryId","responseInit","Headers","queryImpl","routeMatch","Location","actionHeaders","loadRouteData","submit","obj","query","methodNotAllowedMatches","queryRoute","routeData"],"mappings":"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"}